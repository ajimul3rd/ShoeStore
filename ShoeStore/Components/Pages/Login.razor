@page "/login"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using ShoeStore.Auth
@using ShoeStore.Components.ApiService
@using ShoeStore.Servicess.Impl
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject ApiServices ApiServices
@inject IDataSerializer? DataSerializer
@rendermode InteractiveServer

<style>
    .login-container {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    }

    .login-card {
    width: 100%;
    max-width: 480px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    padding: 40px;
    }

    .login-header {
    text-align: center;
    margin-bottom: 35px;
    }

    .login-header h2 {
    font-size: 28px;
    color: #2c3e50;
    margin-bottom: 8px;
    }

    .login-header p {
    color: #7f8c8d;
    font-size: 16px;
    }

    .input-group {
    margin-bottom: 25px;
    position: relative;
    }

    .input-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #34495e;
    font-size: 14px;
    }

    .form-input {
    width: 100%;
    padding: 15px 15px 15px 45px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 15px;
    transition: all 0.3s;
    }

    .form-input:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
    }

    .input-icon {
    position: absolute;
    left: 15px;
    top: 40px;
    color: #7f8c8d;
    }

    .validation-message {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
    display: block;
    }

    .remember-forgot {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    font-size: 14px;
    }

    .remember {
    display: flex;
    align-items: center;
    }

    .remember input {
    margin-right: 8px;
    }

    .forgot-password {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
    }

    .forgot-password:hover {
    text-decoration: underline;
    }

    .error-alert {
    background: #fee;
    border: 1px solid #fcc;
    border-radius: 8px;
    padding: 12px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    color: #e74c3c;
    }

    .error-alert i {
    margin-right: 10px;
    }

    .alert-close {
    background: none;
    border: none;
    color: #e74c3c;
    margin-left: auto;
    cursor: pointer;
    }

    .login-button {
    background: #3498db;
    color: white;
    border: none;
    padding: 15px;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s;
    margin-bottom: 25px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    }

    .login-button:hover:not(:disabled) {
    background: #2980b9;
    }

    .login-button:disabled {
    background: #bdc3c7;
    cursor: not-allowed;
    }

    .spinner {
    display: inline-flex;
    }

    .divider {
    text-align: center;
    position: relative;
    margin-bottom: 25px;
    color: #95a5a6;
    font-size: 14px;
    }

    .divider::before {
    content: "";
    position: absolute;
    left: 0;
    top: 50%;
    width: 42%;
    height: 1px;
    background: #ddd;
    }

    .divider::after {
    content: "";
    position: absolute;
    right: 0;
    top: 50%;
    width: 42%;
    height: 1px;
    background: #ddd;
    }

    .social-login {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 12px;
    margin-bottom: 25px;
    }

    .social-button {
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: white;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    }

    .social-button:hover {
    background: #f8f9fa;
    border-color: #bbb;
    }

    .social-button i {
    font-size: 18px;
    }

    .google i {
    color: #DB4437;
    }

    .facebook i {
    color: #4267B2;
    }

    .microsoft i {
    color: #7FBA00;
    }

    .register-link {
    text-align: center;
    font-size: 14px;
    color: #7f8c8d;
    }

    .register-link a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
    }

    .register-link a:hover {
    text-decoration: underline;
    }

    .security-notice {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
    margin-top: 25px;
    font-size: 13px;
    color: #7f8c8d;
    text-align: center;
    border: 1px solid #eee;
    }

    .security-notice i {
    color: #3498db;
    margin-right: 5px;
    }

    @@media (max-width: 500px) {
    .login-card {
    padding: 25px;
    }

    .remember-forgot {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
    }

    .social-login {
    grid-template-columns: 1fr;
    gap: 8px;
    }
    }
</style>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>Welcome Back</h2>
            <p>Sign in to access your account</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="input-group">
                <label for="userName">Username</label>
                <i class="fas fa-user input-icon"></i>
                <InputText id="userName" @bind-Value="loginModel.UserName"
                class="form-input" placeholder="Enter your username" />
                <ValidationMessage For="@(() => loginModel.UserName)" class="validation-message" />
            </div>

            <div class="input-group">
                <label for="password">Password</label>
                <i class="fas fa-lock input-icon"></i>
                <InputText id="password" type="password" @bind-Value="loginModel.UserPassword"
                class="form-input" placeholder="Enter your password" />
                <ValidationMessage For="@(() => loginModel.UserPassword)" class="validation-message" />
            </div>

            <div class="remember-forgot">
                <div class="remember">
                    <input type="checkbox" id="remember" />
                    <label for="remember">Remember me</label>
                </div>
                <a href="/forgot-password" class="forgot-password">Forgot Password?</a>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-alert">
                    <i class="fas fa-exclamation-circle"></i>
                    <span>@errorMessage</span>
                    <button type="button" class="alert-close" @onclick="() => errorMessage = string.Empty">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            }

            <button type="submit" class="login-button" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                    </span>
                    <span>Authenticating...</span>
                }
                else
                {
                    <span>Sign In</span>
                }
            </button>
        </EditForm>

        <div class="divider">
            <span>Or continue with</span>
        </div>

        <div class="social-login">
            <button type="button" class="social-button google" @onclick="() => SocialLogin()">
                <i class="fab fa-google"></i> Google
            </button>
            <button type="button" class="social-button facebook" @onclick="() => SocialLogin()">
                <i class="fab fa-facebook-f"></i> Facebook
            </button>
            <button type="button" class="social-button microsoft" @onclick="() => SocialLogin()">
                <i class="fab fa-microsoft"></i> Microsoft
            </button>
        </div>

        <div class="register-link">
            Don't have an account? <a href="/register">Create Account</a>
        </div>

        <div class="security-notice">
            <i class="fas fa-lock"></i> Your information is protected by end-to-end encryption
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private bool isCheckingAuth = true;

    protected override async Task OnInitializedAsync()
    {
        loginModel = new LoginModel
            {
                UserName = "admin",
                UserPassword = "admin123"
            };

        // Don't check auth state here to avoid prerendering issues
        isCheckingAuth = false;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Wait a bit to ensure we're past prerendering
                await Task.Delay(100);

                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                Console.WriteLine($"authState: {authState.User.Identity?.IsAuthenticated}");

                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    Navigation.NavigateTo("/", forceLoad: true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking auth state: {ex.Message}");
            }
            finally
            {
                isCheckingAuth = false;
                StateHasChanged();
            }
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var loginResponse = await ApiServices.LoginAsync(loginModel);

            if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.AccessToken))
            {
                await LocalStorage.SetItemAsync("authToken", loginResponse.AccessToken);
                await LocalStorage.SetItemAsync("refreshToken", loginResponse.RefreshToken);

                Console.WriteLine($"AccessToken: {loginResponse.AccessToken}");
                Console.WriteLine($"RefreshToken: {loginResponse.RefreshToken}");

                if (AuthStateProvider is CustomAuthStateProvider authProvider)
                {
                     var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                Console.WriteLine($"authState: {authState.User.Identity?.IsAuthenticated}");
                    await authProvider.NotifyUserAuthentication(loginResponse.AccessToken);
                }

                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid username or password";
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = httpEx.StatusCode switch
            {
                System.Net.HttpStatusCode.Unauthorized => "Invalid username or password",
                System.Net.HttpStatusCode.NotFound => "Login service not available",
                _ => $"Server error: {httpEx.Message}"
            };
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SocialLogin()
    {
        Navigation.NavigateTo($"/external-login?provider=", forceLoad: true);
    }
}