@page "/register"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using ShoeStore.Auth
@using ShoeStore.Components.ApiService
@inject ILogger<Register> Logger
@inject ApiServices ApiServices 
@using ShoeStore.Servicess.Impl
@inject ILocalStorageService LocalStorage
@inject IDataSerializer? DataSerializer
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer


<style>
    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .root-container {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    min-height: 100vh;
    display: grid;
    place-items: center;
    padding: 20px;
    }

    .container {
    display: grid;
    grid-template-columns: minmax(300px, 450px);
    width: 100%;
    max-width: 480px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    padding: 40px;
    }

    .register-header {
    text-align: center;
    margin-bottom: 35px;
    }

    .brand-logo {
    font-size: 32px;
    font-weight: 700;
    margin-bottom: 15px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #2c3e50;
    }

    .brand-logo i {
    margin-right: 10px;
    font-size: 36px;
    color: #3498db;
    }

    .register-header h2 {
    font-size: 28px;
    color: #2c3e50;
    margin-bottom: 8px;
    }

    .register-header p {
    color: #7f8c8d;
    font-size: 16px;
    }

    .form-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 20px;
    }

    .input-group {
    position: relative;
    }

    .input-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #34495e;
    font-size: 14px;
    }

    .input-group input {
    width: 100%;
    padding: 15px 15px 15px 45px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 15px;
    transition: all 0.3s;
    }

    .input-group input:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
    }

    .input-icon {
    position: absolute;
    left: 15px;
    top: 40px;
    color: #7f8c8d;
    }

    .terms {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 10px;
    align-items: start;
    margin: 10px 0 25px;
    }

    .terms input {
    margin-top: 3px;
    }

    .terms label {
    font-size: 14px;
    color: #7f8c8d;
    line-height: 1.5;
    }

    .terms a {
    color: #3498db;
    text-decoration: none;
    }

    .terms a:hover {
    text-decoration: underline;
    }

    .register-button {
    background: #10b981;
    color: white;
    border: none;
    padding: 15px;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s;
    margin-bottom: 25px;
    width: 100%;
    }

    .register-button:hover {
    background: #059669;
    }

    .divider {
    text-align: center;
    position: relative;
    margin-bottom: 25px;
    color: #95a5a6;
    font-size: 14px;
    }

    .divider::before {
    content: "";
    position: absolute;
    left: 0;
    top: 50%;
    width: 42%;
    height: 1px;
    background: #ddd;
    }

    .divider::after {
    content: "";
    position: absolute;
    right: 0;
    top: 50%;
    width: 42%;
    height: 1px;
    background: #ddd;
    }

    .social-register {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 12px;
    margin-bottom: 25px;
    }

    .social-button {
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: white;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    justify-content: center;
    align-items: center;
    }

    .social-button:hover {
    background: #f8f9fa;
    border-color: #bbb;
    }

    .social-button i {
    font-size: 18px;
    }

    .google i {
    color: #DB4437;
    }

    .facebook i {
    color: #4267B2;
    }

    .microsoft i {
    color: #7FBA00;
    }

    .login-link {
    text-align: center;
    font-size: 14px;
    color: #7f8c8d;
    }

    .login-link a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
    }

    .login-link a:hover {
    text-decoration: underline;
    }

    .security-notice {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
    margin-top: 25px;
    font-size: 13px;
    color: #7f8c8d;
    text-align: center;
    border: 1px solid #eee;
    }

    .security-notice i {
    color: #3498db;
    margin-right: 5px;
    }

    .password-strength {
    margin-top: 5px;
    height: 5px;
    border-radius: 3px;
    background: #eee;
    overflow: hidden;
    }

    .strength-meter {
    height: 100%;
    width: 0;
    transition: width 0.3s, background 0.3s;
    }
</style>

<div class="root-container">
    <div class="container">
        <div class="register-header">
            <div class="brand-logo">
                <i class="fas fa-shield-alt"></i>
            </div>
            <h2>Create Account</h2>
            <p>Join us to access exclusive features</p>
        </div>

        <EditForm Model="@registrationModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <div class="form-grid">
                <div class="input-group">
                    <label for="username">Username</label>
                    <i class="fas fa-user input-icon"></i>
                    <InputText id="userName" @bind-Value="registrationModel.UserName"
                    class="form-input" placeholder="Enter your username" />
                    <ValidationMessage For="@(() => registrationModel.UserName)" class="validation-message" />
                </div>

                <div class="input-group">
                    <label for="email">Email Address</label>
                    <i class="fas fa-envelope input-icon"></i>

                    <InputText type="email" id="email" @bind-Value="registrationModel.UserEmail"
                    class="form-input" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => registrationModel.UserEmail)" class="validation-message" />
                </div>

                <div class="input-group">
                    <label for="password">Password</label>
                    <i class="fas fa-lock input-icon"></i>
                    <InputText id="password" type="password" @bind-Value="registrationModel.UserPassword"
                    class="form-input" placeholder="Create a strong password" />
                    <ValidationMessage For="@(() => registrationModel.UserPassword)" class="validation-message" />
                    <div class="password-strength">
                        <div class="strength-meter" id="strength-meter"></div>
                    </div>
                </div>

                <div class="input-group">
                    <label for="confirm-password">Confirm Password</label>
                    <i class="fas fa-lock input-icon"></i>
                    <InputText id="confirm-password" type="password" @bind-Value="registrationModel.ConfirmPassword"
                    class="form-input" placeholder="Confirm your password" />
                    <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" class="validation-message" />

                </div>
            </div>


@*             <div class="terms">
                <input type="checkbox" id="agree-terms">
                <label for="agree-terms">
                    I agree to the <a href="#">Terms of Service</a> and <a href="#">
                        Privacy
                        Policy
                    </a>
                </label>
            </div> *@
            <div class="terms">
                <InputCheckbox id="agree-terms" @bind-Value="registrationModel.AgreeToTerms" />
                <label for="agree-terms">
                    I agree to the <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a>
                </label>
                <ValidationMessage For="@(() => registrationModel.AgreeToTerms)" class="validation-message" />
            </div>

            <button type="submit" class="register-button">
                Create Account
            </button>
        </EditForm>
        <div class="divider">Or sign up with</div>

        <div class="social-register">
            <button class="social-button google">
                <i class="fab fa-google"></i>
            </button>
            <button class="social-button facebook">
                <i class="fab fa-facebook-f"></i>
            </button>
            <button class="social-button microsoft">
                <i class="fab fa-microsoft"></i>
            </button>
        </div>

        <div class="login-link">
            Already have an account? <a href="/login">Sign In</a>
        </div>

        <div class="security-notice">
            <i class="fas fa-lock"></i> We take privacy seriously. Your information is securely encrypted.
        </div>
    </div>
</div>

@code {
    private RegisterModel registrationModel = new();
    private bool isLoading = false;
    private double passwordStrength = 0;
    private string strengthColor = "#eee";
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        registrationModel = new RegisterModel()
            {
                UserName = "admin",
                UserEmail = "ajay933jpg@gmail.com",
                UserPassword = "admin123",
                ConfirmPassword = "admin123"
            };
        await base.OnInitializedAsync();
    }
    private async Task HandleRegistration()
    {

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // DataSerializer.Serializer(registrationModel, "registrationModel:");
            var loginResponse = await ApiServices.RegisterAdminAsync(registrationModel);

            if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.AccessToken))
            {
                // DataSerializer.Serializer(loginResponse, "loginResponse:");
                await LocalStorage.SetItemAsync("authToken", loginResponse.AccessToken);
                await LocalStorage.SetItemAsync("refreshToken", loginResponse.RefreshToken);

                if (AuthStateProvider is CustomAuthStateProvider authProvider)
                {
                    await authProvider.NotifyUserAuthentication(loginResponse.AccessToken);
                }
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid username or password";
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Server error: {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private void UpdatePasswordStrength()
    {
        if (string.IsNullOrEmpty(registrationModel.UserPassword))
        {
            passwordStrength = 0;
            strengthColor = "#eee";
            return;
        }

        int strength = 0;

        // Length check
        if (registrationModel.UserPassword.Length >= 8) strength += 25;

        // Uppercase check
        if (registrationModel.UserPassword.Any(char.IsUpper)) strength += 25;

        // Number check
        if (registrationModel.UserPassword.Any(char.IsDigit)) strength += 25;

        // Special character check
        if (registrationModel.UserPassword.Any(ch => !char.IsLetterOrDigit(ch))) strength += 25;

        passwordStrength = strength;

        // Set color based on strength
        if (strength < 50)
        {
            strengthColor = "#e74c3c";
        }
        else if (strength < 75)
        {
            strengthColor = "#f39c12";
        }
        else
        {
            strengthColor = "#2ecc71";
        }
    }

    private void RegisterWithOAuth()
    {
        Logger.LogInformation("Initiating OAuth registration with {Provider}");
        // Implement OAuth registration logic
    }

}