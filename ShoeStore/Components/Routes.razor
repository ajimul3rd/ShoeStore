@* @using Microsoft.AspNetCore.Components.Authorization
@using ShoeStore.Components.Pages
@using ShoeStore.Auth
<CascadingAuthenticationState>
<Router AppAssembly="typeof(Program).Assembly" AdditionalAssemblies="new[] { typeof(Client._Imports).Assembly }" OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(Layout.MainLayout)">
                <NotAuthorized>
                    <RedirectToLogin />                    
                </NotAuthorized>
                <Authorizing>
                    <p>Loading...</p>
                </Authorizing>
            </AuthorizeRouteView>
    </Found>
        <NotFound>
            <LayoutView Layout="@typeof(Layout.MainLayout)">
                <p>Not found</p>
            </LayoutView>
        </NotFound>
</Router>
</CascadingAuthenticationState>


@code {
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    private bool _isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender && !_isInitialized)
        {
            _isInitialized = true;

            if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
            {
                await customProvider.StateChangedAsync();
            }

            StateHasChanged();
        }
    }


    private Task OnNavigateAsync(NavigationContext context)
    {
        if (context.Path == "/login" || context.Path.StartsWith("/_content/"))
            return Task.CompletedTask;

        return Task.CompletedTask;
    }

    private class RedirectToLogin : ComponentBase
    {
        [Inject] private NavigationManager Navigation { get; set; } = null!;

        protected override void OnInitialized()
        {
            Navigation.NavigateTo("/login", replace: true);
        }
    }
} *@


@using Microsoft.AspNetCore.Components.Authorization
@using ShoeStore.Components.Pages
@using ShoeStore.Auth
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(Layout.MainLayout)">
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
                <Authorizing>
                    <p>Loading...</p>
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(Layout.MainLayout)">
                <p>Not found</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await ((CustomAuthStateProvider)AuthenticationStateProvider).StateChangedAsync();
    }

    private Task OnNavigateAsync(NavigationContext context)
    {
        // Skip auth check for login page and static assets
        if (context.Path == "/login" || context.Path.StartsWith("/_content/"))
            return Task.CompletedTask;

        return Task.CompletedTask;
    }

    private class RedirectToLogin : ComponentBase
    {
        [Inject] private NavigationManager Navigation { get; set; } = null!;

        protected override void OnInitialized()
        {
            Navigation.NavigateTo("/login", replace: true);
        }
    }
}